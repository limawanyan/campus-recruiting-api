///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package comment_info

import (
	"fmt"
	"time"

	"campus-recruiting-api/internal/repository/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *CommentInfo {
	return new(CommentInfo)
}

func NewQueryBuilder() *commentInfoQueryBuilder {
	return new(commentInfoQueryBuilder)
}

func (t *CommentInfo) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type commentInfoQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *commentInfoQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *commentInfoQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&CommentInfo{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *commentInfoQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&CommentInfo{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *commentInfoQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&CommentInfo{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *commentInfoQueryBuilder) First(db *gorm.DB) (*CommentInfo, error) {
	ret := &CommentInfo{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *commentInfoQueryBuilder) QueryOne(db *gorm.DB) (*CommentInfo, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *commentInfoQueryBuilder) QueryAll(db *gorm.DB) ([]*CommentInfo, error) {
	var ret []*CommentInfo
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *commentInfoQueryBuilder) Limit(limit int) *commentInfoQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *commentInfoQueryBuilder) Offset(offset int) *commentInfoQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *commentInfoQueryBuilder) WhereId(p mysql.Predicate, value int32) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) WhereIdIn(value []int32) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) WhereIdNotIn(value []int32) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) OrderById(asc bool) *commentInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *commentInfoQueryBuilder) WhereCreatedAt(p mysql.Predicate, value time.Time) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) WhereCreatedAtIn(value []time.Time) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) WhereCreatedAtNotIn(value []time.Time) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) OrderByCreatedAt(asc bool) *commentInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_at "+order)
	return qb
}

func (qb *commentInfoQueryBuilder) WhereUpdatedAt(p mysql.Predicate, value time.Time) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) WhereUpdatedAtIn(value []time.Time) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) WhereUpdatedAtNotIn(value []time.Time) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) OrderByUpdatedAt(asc bool) *commentInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_at "+order)
	return qb
}

func (qb *commentInfoQueryBuilder) WhereTopicId(p mysql.Predicate, value int32) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "topic_id", p),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) WhereTopicIdIn(value []int32) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "topic_id", "IN"),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) WhereTopicIdNotIn(value []int32) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "topic_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) OrderByTopicId(asc bool) *commentInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "topic_id "+order)
	return qb
}

func (qb *commentInfoQueryBuilder) WhereType(p mysql.Predicate, value int32) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "type", p),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) WhereTypeIn(value []int32) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "type", "IN"),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) WhereTypeNotIn(value []int32) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "type", "NOT IN"),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) OrderByType(asc bool) *commentInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "type "+order)
	return qb
}

func (qb *commentInfoQueryBuilder) WhereParentId(p mysql.Predicate, value int32) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "parent_id", p),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) WhereParentIdIn(value []int32) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "parent_id", "IN"),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) WhereParentIdNotIn(value []int32) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "parent_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) OrderByParentId(asc bool) *commentInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "parent_id "+order)
	return qb
}

func (qb *commentInfoQueryBuilder) WhereFromUserId(p mysql.Predicate, value int32) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "from_user_id", p),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) WhereFromUserIdIn(value []int32) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "from_user_id", "IN"),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) WhereFromUserIdNotIn(value []int32) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "from_user_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) OrderByFromUserId(asc bool) *commentInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "from_user_id "+order)
	return qb
}

func (qb *commentInfoQueryBuilder) WhereToUserId(p mysql.Predicate, value int32) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "to_user_id", p),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) WhereToUserIdIn(value []int32) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "to_user_id", "IN"),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) WhereToUserIdNotIn(value []int32) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "to_user_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) OrderByToUserId(asc bool) *commentInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "to_user_id "+order)
	return qb
}

func (qb *commentInfoQueryBuilder) WhereFromNickname(p mysql.Predicate, value string) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "from_nickname", p),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) WhereFromNicknameIn(value []string) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "from_nickname", "IN"),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) WhereFromNicknameNotIn(value []string) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "from_nickname", "NOT IN"),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) OrderByFromNickname(asc bool) *commentInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "from_nickname "+order)
	return qb
}

func (qb *commentInfoQueryBuilder) WhereFromHead(p mysql.Predicate, value string) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "from_head", p),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) WhereFromHeadIn(value []string) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "from_head", "IN"),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) WhereFromHeadNotIn(value []string) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "from_head", "NOT IN"),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) OrderByFromHead(asc bool) *commentInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "from_head "+order)
	return qb
}

func (qb *commentInfoQueryBuilder) WhereToNickname(p mysql.Predicate, value string) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "to_nickname", p),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) WhereToNicknameIn(value []string) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "to_nickname", "IN"),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) WhereToNicknameNotIn(value []string) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "to_nickname", "NOT IN"),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) OrderByToNickname(asc bool) *commentInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "to_nickname "+order)
	return qb
}

func (qb *commentInfoQueryBuilder) WhereContent(p mysql.Predicate, value string) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "content", p),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) WhereContentIn(value []string) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "content", "IN"),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) WhereContentNotIn(value []string) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "content", "NOT IN"),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) OrderByContent(asc bool) *commentInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "content "+order)
	return qb
}

func (qb *commentInfoQueryBuilder) WhereLikeNum(p mysql.Predicate, value int32) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "like_num", p),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) WhereLikeNumIn(value []int32) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "like_num", "IN"),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) WhereLikeNumNotIn(value []int32) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "like_num", "NOT IN"),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) OrderByLikeNum(asc bool) *commentInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "like_num "+order)
	return qb
}

func (qb *commentInfoQueryBuilder) WhereIsDeleted(p mysql.Predicate, value int32) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", p),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) WhereIsDeletedIn(value []int32) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", "IN"),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) WhereIsDeletedNotIn(value []int32) *commentInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", "NOT IN"),
		value,
	})
	return qb
}

func (qb *commentInfoQueryBuilder) OrderByIsDeleted(asc bool) *commentInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "is_deleted "+order)
	return qb
}
