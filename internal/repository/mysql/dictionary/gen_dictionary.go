///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package dictionary

import (
	"fmt"
	"time"

	"campus-recruiting-api/internal/repository/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *Dictionary {
	return new(Dictionary)
}

func NewQueryBuilder() *dictionaryQueryBuilder {
	return new(dictionaryQueryBuilder)
}

func (t *Dictionary) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type dictionaryQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *dictionaryQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *dictionaryQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&Dictionary{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *dictionaryQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&Dictionary{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *dictionaryQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&Dictionary{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *dictionaryQueryBuilder) First(db *gorm.DB) (*Dictionary, error) {
	ret := &Dictionary{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *dictionaryQueryBuilder) QueryOne(db *gorm.DB) (*Dictionary, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *dictionaryQueryBuilder) QueryAll(db *gorm.DB) ([]*Dictionary, error) {
	var ret []*Dictionary
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *dictionaryQueryBuilder) Limit(limit int) *dictionaryQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *dictionaryQueryBuilder) Offset(offset int) *dictionaryQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *dictionaryQueryBuilder) WhereId(p mysql.Predicate, value int32) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) WhereIdIn(value []int32) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) WhereIdNotIn(value []int32) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) OrderById(asc bool) *dictionaryQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *dictionaryQueryBuilder) WhereCreatedAt(p mysql.Predicate, value time.Time) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) WhereCreatedAtIn(value []time.Time) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) WhereCreatedAtNotIn(value []time.Time) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) OrderByCreatedAt(asc bool) *dictionaryQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_at "+order)
	return qb
}

func (qb *dictionaryQueryBuilder) WhereUpdatedAt(p mysql.Predicate, value time.Time) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) WhereUpdatedAtIn(value []time.Time) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) WhereUpdatedAtNotIn(value []time.Time) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) OrderByUpdatedAt(asc bool) *dictionaryQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_at "+order)
	return qb
}

func (qb *dictionaryQueryBuilder) WhereName(p mysql.Predicate, value string) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", p),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) WhereNameIn(value []string) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", "IN"),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) WhereNameNotIn(value []string) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) OrderByName(asc bool) *dictionaryQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "name "+order)
	return qb
}

func (qb *dictionaryQueryBuilder) WhereTypeCode(p mysql.Predicate, value string) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "type_code", p),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) WhereTypeCodeIn(value []string) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "type_code", "IN"),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) WhereTypeCodeNotIn(value []string) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "type_code", "NOT IN"),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) OrderByTypeCode(asc bool) *dictionaryQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "type_code "+order)
	return qb
}

func (qb *dictionaryQueryBuilder) WhereLabel(p mysql.Predicate, value string) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "label", p),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) WhereLabelIn(value []string) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "label", "IN"),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) WhereLabelNotIn(value []string) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "label", "NOT IN"),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) OrderByLabel(asc bool) *dictionaryQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "label "+order)
	return qb
}

func (qb *dictionaryQueryBuilder) WhereValue(p mysql.Predicate, value int32) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "value", p),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) WhereValueIn(value []int32) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "value", "IN"),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) WhereValueNotIn(value []int32) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "value", "NOT IN"),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) OrderByValue(asc bool) *dictionaryQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "value "+order)
	return qb
}

func (qb *dictionaryQueryBuilder) WhereState(p mysql.Predicate, value int32) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "state", p),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) WhereStateIn(value []int32) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "state", "IN"),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) WhereStateNotIn(value []int32) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "state", "NOT IN"),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) OrderByState(asc bool) *dictionaryQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "state "+order)
	return qb
}

func (qb *dictionaryQueryBuilder) WhereDescription(p mysql.Predicate, value string) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "description", p),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) WhereDescriptionIn(value []string) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "description", "IN"),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) WhereDescriptionNotIn(value []string) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "description", "NOT IN"),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) OrderByDescription(asc bool) *dictionaryQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "description "+order)
	return qb
}

func (qb *dictionaryQueryBuilder) WhereSort(p mysql.Predicate, value int32) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "sort", p),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) WhereSortIn(value []int32) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "sort", "IN"),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) WhereSortNotIn(value []int32) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "sort", "NOT IN"),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) OrderBySort(asc bool) *dictionaryQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "sort "+order)
	return qb
}

func (qb *dictionaryQueryBuilder) WhereParentId(p mysql.Predicate, value int32) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "parent_id", p),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) WhereParentIdIn(value []int32) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "parent_id", "IN"),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) WhereParentIdNotIn(value []int32) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "parent_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) OrderByParentId(asc bool) *dictionaryQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "parent_id "+order)
	return qb
}

func (qb *dictionaryQueryBuilder) WhereReadonly(p mysql.Predicate, value int32) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "readonly", p),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) WhereReadonlyIn(value []int32) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "readonly", "IN"),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) WhereReadonlyNotIn(value []int32) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "readonly", "NOT IN"),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) OrderByReadonly(asc bool) *dictionaryQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "readonly "+order)
	return qb
}

func (qb *dictionaryQueryBuilder) WhereIsDeleted(p mysql.Predicate, value int32) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", p),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) WhereIsDeletedIn(value []int32) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", "IN"),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) WhereIsDeletedNotIn(value []int32) *dictionaryQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", "NOT IN"),
		value,
	})
	return qb
}

func (qb *dictionaryQueryBuilder) OrderByIsDeleted(asc bool) *dictionaryQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "is_deleted "+order)
	return qb
}
