///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package notice

import (
	"fmt"
	"time"

	"campus-recruiting-api/internal/repository/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *Notice {
	return new(Notice)
}

func NewQueryBuilder() *noticeQueryBuilder {
	return new(noticeQueryBuilder)
}

func (t *Notice) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type noticeQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *noticeQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *noticeQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&Notice{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *noticeQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&Notice{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *noticeQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&Notice{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *noticeQueryBuilder) First(db *gorm.DB) (*Notice, error) {
	ret := &Notice{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *noticeQueryBuilder) QueryOne(db *gorm.DB) (*Notice, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *noticeQueryBuilder) QueryAll(db *gorm.DB) ([]*Notice, error) {
	var ret []*Notice
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *noticeQueryBuilder) Limit(limit int) *noticeQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *noticeQueryBuilder) Offset(offset int) *noticeQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *noticeQueryBuilder) WhereId(p mysql.Predicate, value int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereIdIn(value []int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereIdNotIn(value []int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) OrderById(asc bool) *noticeQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *noticeQueryBuilder) WhereCreatedAt(p mysql.Predicate, value time.Time) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereCreatedAtIn(value []time.Time) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereCreatedAtNotIn(value []time.Time) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) OrderByCreatedAt(asc bool) *noticeQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_at "+order)
	return qb
}

func (qb *noticeQueryBuilder) WhereUpdatedAt(p mysql.Predicate, value time.Time) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereUpdatedAtIn(value []time.Time) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereUpdatedAtNotIn(value []time.Time) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) OrderByUpdatedAt(asc bool) *noticeQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_at "+order)
	return qb
}

func (qb *noticeQueryBuilder) WhereEventType(p mysql.Predicate, value int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "event_type", p),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereEventTypeIn(value []int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "event_type", "IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereEventTypeNotIn(value []int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "event_type", "NOT IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) OrderByEventType(asc bool) *noticeQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "event_type "+order)
	return qb
}

func (qb *noticeQueryBuilder) WhereContentType(p mysql.Predicate, value int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "content_type", p),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereContentTypeIn(value []int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "content_type", "IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereContentTypeNotIn(value []int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "content_type", "NOT IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) OrderByContentType(asc bool) *noticeQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "content_type "+order)
	return qb
}

func (qb *noticeQueryBuilder) WhereType(p mysql.Predicate, value int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "type", p),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereTypeIn(value []int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "type", "IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereTypeNotIn(value []int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "type", "NOT IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) OrderByType(asc bool) *noticeQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "type "+order)
	return qb
}

func (qb *noticeQueryBuilder) WhereTriggerUserId(p mysql.Predicate, value int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "trigger_user_id", p),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereTriggerUserIdIn(value []int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "trigger_user_id", "IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereTriggerUserIdNotIn(value []int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "trigger_user_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) OrderByTriggerUserId(asc bool) *noticeQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "trigger_user_id "+order)
	return qb
}

func (qb *noticeQueryBuilder) WhereTriggerUserNickname(p mysql.Predicate, value string) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "trigger_user_nickname", p),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereTriggerUserNicknameIn(value []string) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "trigger_user_nickname", "IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereTriggerUserNicknameNotIn(value []string) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "trigger_user_nickname", "NOT IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) OrderByTriggerUserNickname(asc bool) *noticeQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "trigger_user_nickname "+order)
	return qb
}

func (qb *noticeQueryBuilder) WhereTriggerUserPhoto(p mysql.Predicate, value string) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "trigger_user_photo", p),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereTriggerUserPhotoIn(value []string) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "trigger_user_photo", "IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereTriggerUserPhotoNotIn(value []string) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "trigger_user_photo", "NOT IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) OrderByTriggerUserPhoto(asc bool) *noticeQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "trigger_user_photo "+order)
	return qb
}

func (qb *noticeQueryBuilder) WhereSubjectId(p mysql.Predicate, value int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "subject_id", p),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereSubjectIdIn(value []int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "subject_id", "IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereSubjectIdNotIn(value []int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "subject_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) OrderBySubjectId(asc bool) *noticeQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "subject_id "+order)
	return qb
}

func (qb *noticeQueryBuilder) WhereParentCommentId(p mysql.Predicate, value int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "parent_comment_id", p),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereParentCommentIdIn(value []int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "parent_comment_id", "IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereParentCommentIdNotIn(value []int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "parent_comment_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) OrderByParentCommentId(asc bool) *noticeQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "parent_comment_id "+order)
	return qb
}

func (qb *noticeQueryBuilder) WhereCommentId(p mysql.Predicate, value int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "comment_id", p),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereCommentIdIn(value []int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "comment_id", "IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereCommentIdNotIn(value []int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "comment_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) OrderByCommentId(asc bool) *noticeQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "comment_id "+order)
	return qb
}

func (qb *noticeQueryBuilder) WhereTargetId(p mysql.Predicate, value int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "target_id", p),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereTargetIdIn(value []int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "target_id", "IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereTargetIdNotIn(value []int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "target_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) OrderByTargetId(asc bool) *noticeQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "target_id "+order)
	return qb
}

func (qb *noticeQueryBuilder) WhereTitle(p mysql.Predicate, value string) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "title", p),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereTitleIn(value []string) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "title", "IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereTitleNotIn(value []string) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "title", "NOT IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) OrderByTitle(asc bool) *noticeQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "title "+order)
	return qb
}

func (qb *noticeQueryBuilder) WhereContent(p mysql.Predicate, value string) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "content", p),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereContentIn(value []string) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "content", "IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereContentNotIn(value []string) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "content", "NOT IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) OrderByContent(asc bool) *noticeQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "content "+order)
	return qb
}

func (qb *noticeQueryBuilder) WhereUri(p mysql.Predicate, value string) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "uri", p),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereUriIn(value []string) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "uri", "IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereUriNotIn(value []string) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "uri", "NOT IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) OrderByUri(asc bool) *noticeQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "uri "+order)
	return qb
}

func (qb *noticeQueryBuilder) WhereIsRead(p mysql.Predicate, value int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_read", p),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereIsReadIn(value []int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_read", "IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) WhereIsReadNotIn(value []int32) *noticeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_read", "NOT IN"),
		value,
	})
	return qb
}

func (qb *noticeQueryBuilder) OrderByIsRead(asc bool) *noticeQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "is_read "+order)
	return qb
}
