///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package post_info

import (
	"fmt"
	"time"

	"campus-recruiting-api/internal/repository/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *PostInfo {
	return new(PostInfo)
}

func NewQueryBuilder() *postInfoQueryBuilder {
	return new(postInfoQueryBuilder)
}

func (t *PostInfo) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type postInfoQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *postInfoQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *postInfoQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&PostInfo{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *postInfoQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&PostInfo{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *postInfoQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&PostInfo{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *postInfoQueryBuilder) First(db *gorm.DB) (*PostInfo, error) {
	ret := &PostInfo{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *postInfoQueryBuilder) QueryOne(db *gorm.DB) (*PostInfo, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *postInfoQueryBuilder) QueryAll(db *gorm.DB) ([]*PostInfo, error) {
	var ret []*PostInfo
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *postInfoQueryBuilder) Limit(limit int) *postInfoQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *postInfoQueryBuilder) Offset(offset int) *postInfoQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *postInfoQueryBuilder) WhereId(p mysql.Predicate, value int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) WhereIdIn(value []int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) WhereIdNotIn(value []int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) OrderById(asc bool) *postInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *postInfoQueryBuilder) WhereTitle(p mysql.Predicate, value string) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "title", p),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) WhereTitleIn(value []string) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "title", "IN"),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) WhereTitleNotIn(value []string) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "title", "NOT IN"),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) OrderByTitle(asc bool) *postInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "title "+order)
	return qb
}

func (qb *postInfoQueryBuilder) WhereContent(p mysql.Predicate, value string) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "content", p),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) WhereContentIn(value []string) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "content", "IN"),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) WhereContentNotIn(value []string) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "content", "NOT IN"),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) OrderByContent(asc bool) *postInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "content "+order)
	return qb
}

func (qb *postInfoQueryBuilder) WhereParentType(p mysql.Predicate, value int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "parent_type", p),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) WhereParentTypeIn(value []int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "parent_type", "IN"),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) WhereParentTypeNotIn(value []int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "parent_type", "NOT IN"),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) OrderByParentType(asc bool) *postInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "parent_type "+order)
	return qb
}

func (qb *postInfoQueryBuilder) WhereSubType(p mysql.Predicate, value int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "sub_type", p),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) WhereSubTypeIn(value []int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "sub_type", "IN"),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) WhereSubTypeNotIn(value []int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "sub_type", "NOT IN"),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) OrderBySubType(asc bool) *postInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "sub_type "+order)
	return qb
}

func (qb *postInfoQueryBuilder) WhereCreatedAt(p mysql.Predicate, value time.Time) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) WhereCreatedAtIn(value []time.Time) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) WhereCreatedAtNotIn(value []time.Time) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) OrderByCreatedAt(asc bool) *postInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_at "+order)
	return qb
}

func (qb *postInfoQueryBuilder) WhereUpdatedAt(p mysql.Predicate, value time.Time) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) WhereUpdatedAtIn(value []time.Time) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) WhereUpdatedAtNotIn(value []time.Time) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) OrderByUpdatedAt(asc bool) *postInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_at "+order)
	return qb
}

func (qb *postInfoQueryBuilder) WhereFromUserId(p mysql.Predicate, value int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "from_user_id", p),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) WhereFromUserIdIn(value []int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "from_user_id", "IN"),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) WhereFromUserIdNotIn(value []int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "from_user_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) OrderByFromUserId(asc bool) *postInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "from_user_id "+order)
	return qb
}

func (qb *postInfoQueryBuilder) WhereSortWeight(p mysql.Predicate, value int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "sort_weight", p),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) WhereSortWeightIn(value []int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "sort_weight", "IN"),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) WhereSortWeightNotIn(value []int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "sort_weight", "NOT IN"),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) OrderBySortWeight(asc bool) *postInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "sort_weight "+order)
	return qb
}

func (qb *postInfoQueryBuilder) OrderByCommentUpdated(asc bool) *postInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "comment_updated "+order)
	return qb
}

func (qb *postInfoQueryBuilder) WhereLikeNum(p mysql.Predicate, value int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "like_num", p),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) WhereLikeNumIn(value []int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "like_num", "IN"),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) WhereLikeNumNotIn(value []int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "like_num", "NOT IN"),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) OrderByLikeNum(asc bool) *postInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "like_num "+order)
	return qb
}

func (qb *postInfoQueryBuilder) WhereState(p mysql.Predicate, value int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "state", p),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) WhereStateIn(value []int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "state", "IN"),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) WhereStateNotIn(value []int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "state", "NOT IN"),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) OrderByState(asc bool) *postInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "state "+order)
	return qb
}

func (qb *postInfoQueryBuilder) WhereCommentNum(p mysql.Predicate, value int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "comment_num", p),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) WhereCommentNumIn(value []int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "comment_num", "IN"),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) WhereCommentNumNotIn(value []int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "comment_num", "NOT IN"),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) OrderByCommentNum(asc bool) *postInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "comment_num "+order)
	return qb
}

func (qb *postInfoQueryBuilder) WhereBrowseNum(p mysql.Predicate, value int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "browse_num", p),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) WhereBrowseNumIn(value []int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "browse_num", "IN"),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) WhereBrowseNumNotIn(value []int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "browse_num", "NOT IN"),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) OrderByBrowseNum(asc bool) *postInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "browse_num "+order)
	return qb
}

func (qb *postInfoQueryBuilder) WhereIsDeleted(p mysql.Predicate, value int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", p),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) WhereIsDeletedIn(value []int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", "IN"),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) WhereIsDeletedNotIn(value []int32) *postInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", "NOT IN"),
		value,
	})
	return qb
}

func (qb *postInfoQueryBuilder) OrderByIsDeleted(asc bool) *postInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "is_deleted "+order)
	return qb
}
