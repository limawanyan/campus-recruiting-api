///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package salary_info

import (
	"fmt"
	"time"

	"campus-recruiting-api/internal/repository/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *SalaryInfo {
	return new(SalaryInfo)
}

func NewQueryBuilder() *salaryInfoQueryBuilder {
	return new(salaryInfoQueryBuilder)
}

func (t *SalaryInfo) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type salaryInfoQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *salaryInfoQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *salaryInfoQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&SalaryInfo{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *salaryInfoQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&SalaryInfo{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *salaryInfoQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&SalaryInfo{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *salaryInfoQueryBuilder) First(db *gorm.DB) (*SalaryInfo, error) {
	ret := &SalaryInfo{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *salaryInfoQueryBuilder) QueryOne(db *gorm.DB) (*SalaryInfo, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *salaryInfoQueryBuilder) QueryAll(db *gorm.DB) ([]*SalaryInfo, error) {
	var ret []*SalaryInfo
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *salaryInfoQueryBuilder) Limit(limit int) *salaryInfoQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *salaryInfoQueryBuilder) Offset(offset int) *salaryInfoQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereId(p mysql.Predicate, value int32) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereIdIn(value []int32) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereIdNotIn(value []int32) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) OrderById(asc bool) *salaryInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereCreatedAt(p mysql.Predicate, value time.Time) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereCreatedAtIn(value []time.Time) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereCreatedAtNotIn(value []time.Time) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) OrderByCreatedAt(asc bool) *salaryInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_at "+order)
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereUpdatedAt(p mysql.Predicate, value time.Time) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereUpdatedAtIn(value []time.Time) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereUpdatedAtNotIn(value []time.Time) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) OrderByUpdatedAt(asc bool) *salaryInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_at "+order)
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereDescription(p mysql.Predicate, value string) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "description", p),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereDescriptionIn(value []string) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "description", "IN"),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereDescriptionNotIn(value []string) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "description", "NOT IN"),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) OrderByDescription(asc bool) *salaryInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "description "+order)
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereState(p mysql.Predicate, value int32) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "state", p),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereStateIn(value []int32) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "state", "IN"),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereStateNotIn(value []int32) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "state", "NOT IN"),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) OrderByState(asc bool) *salaryInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "state "+order)
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereCompanyName(p mysql.Predicate, value string) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "company_name", p),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereCompanyNameIn(value []string) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "company_name", "IN"),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereCompanyNameNotIn(value []string) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "company_name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) OrderByCompanyName(asc bool) *salaryInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "company_name "+order)
	return qb
}

func (qb *salaryInfoQueryBuilder) WherePostName(p mysql.Predicate, value string) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "post_name", p),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) WherePostNameIn(value []string) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "post_name", "IN"),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) WherePostNameNotIn(value []string) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "post_name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) OrderByPostName(asc bool) *salaryInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "post_name "+order)
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereCityName(p mysql.Predicate, value string) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "city_name", p),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereCityNameIn(value []string) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "city_name", "IN"),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereCityNameNotIn(value []string) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "city_name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) OrderByCityName(asc bool) *salaryInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "city_name "+order)
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereRemarks(p mysql.Predicate, value string) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "remarks", p),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereRemarksIn(value []string) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "remarks", "IN"),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereRemarksNotIn(value []string) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "remarks", "NOT IN"),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) OrderByRemarks(asc bool) *salaryInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "remarks "+order)
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereEducation(p mysql.Predicate, value int32) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "education", p),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereEducationIn(value []int32) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "education", "IN"),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereEducationNotIn(value []int32) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "education", "NOT IN"),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) OrderByEducation(asc bool) *salaryInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "education "+order)
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereIndustry(p mysql.Predicate, value int32) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "industry", p),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereIndustryIn(value []int32) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "industry", "IN"),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereIndustryNotIn(value []int32) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "industry", "NOT IN"),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) OrderByIndustry(asc bool) *salaryInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "industry "+order)
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereReliability(p mysql.Predicate, value int32) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "reliability", p),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereReliabilityIn(value []int32) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "reliability", "IN"),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereReliabilityNotIn(value []int32) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "reliability", "NOT IN"),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) OrderByReliability(asc bool) *salaryInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "reliability "+order)
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereFromUserId(p mysql.Predicate, value int32) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "from_user_id", p),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereFromUserIdIn(value []int32) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "from_user_id", "IN"),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereFromUserIdNotIn(value []int32) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "from_user_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) OrderByFromUserId(asc bool) *salaryInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "from_user_id "+order)
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereFuzzyQuery(p mysql.Predicate, value string) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "fuzzy_query", p),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereFuzzyQueryIn(value []string) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "fuzzy_query", "IN"),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) WhereFuzzyQueryNotIn(value []string) *salaryInfoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "fuzzy_query", "NOT IN"),
		value,
	})
	return qb
}

func (qb *salaryInfoQueryBuilder) OrderByFuzzyQuery(asc bool) *salaryInfoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "fuzzy_query "+order)
	return qb
}
