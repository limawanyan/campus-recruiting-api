///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package user

import (
	"fmt"
	"time"

	"campus-recruiting-api/internal/repository/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *User {
	return new(User)
}

func NewQueryBuilder() *userQueryBuilder {
	return new(userQueryBuilder)
}

func (t *User) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type userQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *userQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *userQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&User{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *userQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&User{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *userQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&User{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *userQueryBuilder) First(db *gorm.DB) (*User, error) {
	ret := &User{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *userQueryBuilder) QueryOne(db *gorm.DB) (*User, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *userQueryBuilder) QueryAll(db *gorm.DB) ([]*User, error) {
	var ret []*User
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *userQueryBuilder) Limit(limit int) *userQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *userQueryBuilder) Offset(offset int) *userQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *userQueryBuilder) WhereId(p mysql.Predicate, value int32) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereIdIn(value []int32) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereIdNotIn(value []int32) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderById(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *userQueryBuilder) WhereCreatedAt(p mysql.Predicate, value time.Time) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereCreatedAtIn(value []time.Time) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereCreatedAtNotIn(value []time.Time) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderByCreatedAt(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_at "+order)
	return qb
}

func (qb *userQueryBuilder) WhereUpdatedAt(p mysql.Predicate, value time.Time) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereUpdatedAtIn(value []time.Time) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereUpdatedAtNotIn(value []time.Time) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderByUpdatedAt(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_at "+order)
	return qb
}

func (qb *userQueryBuilder) WhereWxOpenid(p mysql.Predicate, value string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "wx_openid", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereWxOpenidIn(value []string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "wx_openid", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereWxOpenidNotIn(value []string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "wx_openid", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderByWxOpenid(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "wx_openid "+order)
	return qb
}

func (qb *userQueryBuilder) WhereNickname(p mysql.Predicate, value string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "nickname", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereNicknameIn(value []string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "nickname", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereNicknameNotIn(value []string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "nickname", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderByNickname(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "nickname "+order)
	return qb
}

func (qb *userQueryBuilder) WherePhone(p mysql.Predicate, value string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "phone", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WherePhoneIn(value []string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "phone", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WherePhoneNotIn(value []string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "phone", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderByPhone(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "phone "+order)
	return qb
}

func (qb *userQueryBuilder) WherePassword(p mysql.Predicate, value string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "password", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WherePasswordIn(value []string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "password", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WherePasswordNotIn(value []string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "password", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderByPassword(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "password "+order)
	return qb
}

func (qb *userQueryBuilder) WhereSex(p mysql.Predicate, value int32) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "sex", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereSexIn(value []int32) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "sex", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereSexNotIn(value []int32) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "sex", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderBySex(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "sex "+order)
	return qb
}

func (qb *userQueryBuilder) WhereHeadPortrait(p mysql.Predicate, value string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "head_portrait", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereHeadPortraitIn(value []string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "head_portrait", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereHeadPortraitNotIn(value []string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "head_portrait", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderByHeadPortrait(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "head_portrait "+order)
	return qb
}

func (qb *userQueryBuilder) WhereGraduationYear(p mysql.Predicate, value time.Time) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "graduation_year", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereGraduationYearIn(value []time.Time) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "graduation_year", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereGraduationYearNotIn(value []time.Time) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "graduation_year", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderByGraduationYear(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "graduation_year "+order)
	return qb
}

func (qb *userQueryBuilder) WhereIntentionalWork(p mysql.Predicate, value string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "intentional_work", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereIntentionalWorkIn(value []string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "intentional_work", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereIntentionalWorkNotIn(value []string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "intentional_work", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderByIntentionalWork(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "intentional_work "+order)
	return qb
}

func (qb *userQueryBuilder) WhereAutograph(p mysql.Predicate, value string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "autograph", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereAutographIn(value []string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "autograph", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereAutographNotIn(value []string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "autograph", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderByAutograph(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "autograph "+order)
	return qb
}

func (qb *userQueryBuilder) WhereEmail(p mysql.Predicate, value string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "email", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereEmailIn(value []string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "email", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereEmailNotIn(value []string) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "email", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderByEmail(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "email "+order)
	return qb
}

func (qb *userQueryBuilder) WhereState(p mysql.Predicate, value int32) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "state", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereStateIn(value []int32) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "state", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereStateNotIn(value []int32) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "state", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderByState(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "state "+order)
	return qb
}

func (qb *userQueryBuilder) WhereIsDeleted(p mysql.Predicate, value int32) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", p),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereIsDeletedIn(value []int32) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", "IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) WhereIsDeletedNotIn(value []int32) *userQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userQueryBuilder) OrderByIsDeleted(asc bool) *userQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "is_deleted "+order)
	return qb
}
