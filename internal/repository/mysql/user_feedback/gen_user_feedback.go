///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package user_feedback

import (
	"fmt"
	"time"

	"campus-recruiting-api/internal/repository/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *UserFeedback {
	return new(UserFeedback)
}

func NewQueryBuilder() *userFeedbackQueryBuilder {
	return new(userFeedbackQueryBuilder)
}

func (t *UserFeedback) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type userFeedbackQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *userFeedbackQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *userFeedbackQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&UserFeedback{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *userFeedbackQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&UserFeedback{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *userFeedbackQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&UserFeedback{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *userFeedbackQueryBuilder) First(db *gorm.DB) (*UserFeedback, error) {
	ret := &UserFeedback{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *userFeedbackQueryBuilder) QueryOne(db *gorm.DB) (*UserFeedback, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *userFeedbackQueryBuilder) QueryAll(db *gorm.DB) ([]*UserFeedback, error) {
	var ret []*UserFeedback
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *userFeedbackQueryBuilder) Limit(limit int) *userFeedbackQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *userFeedbackQueryBuilder) Offset(offset int) *userFeedbackQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *userFeedbackQueryBuilder) WhereId(p mysql.Predicate, value int32) *userFeedbackQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *userFeedbackQueryBuilder) WhereIdIn(value []int32) *userFeedbackQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *userFeedbackQueryBuilder) WhereIdNotIn(value []int32) *userFeedbackQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userFeedbackQueryBuilder) OrderById(asc bool) *userFeedbackQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *userFeedbackQueryBuilder) WhereUserId(p mysql.Predicate, value int32) *userFeedbackQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_id", p),
		value,
	})
	return qb
}

func (qb *userFeedbackQueryBuilder) WhereUserIdIn(value []int32) *userFeedbackQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_id", "IN"),
		value,
	})
	return qb
}

func (qb *userFeedbackQueryBuilder) WhereUserIdNotIn(value []int32) *userFeedbackQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userFeedbackQueryBuilder) OrderByUserId(asc bool) *userFeedbackQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "user_id "+order)
	return qb
}

func (qb *userFeedbackQueryBuilder) WhereContent(p mysql.Predicate, value string) *userFeedbackQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "content", p),
		value,
	})
	return qb
}

func (qb *userFeedbackQueryBuilder) WhereContentIn(value []string) *userFeedbackQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "content", "IN"),
		value,
	})
	return qb
}

func (qb *userFeedbackQueryBuilder) WhereContentNotIn(value []string) *userFeedbackQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "content", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userFeedbackQueryBuilder) OrderByContent(asc bool) *userFeedbackQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "content "+order)
	return qb
}

func (qb *userFeedbackQueryBuilder) WhereTel(p mysql.Predicate, value string) *userFeedbackQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "tel", p),
		value,
	})
	return qb
}

func (qb *userFeedbackQueryBuilder) WhereTelIn(value []string) *userFeedbackQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "tel", "IN"),
		value,
	})
	return qb
}

func (qb *userFeedbackQueryBuilder) WhereTelNotIn(value []string) *userFeedbackQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "tel", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userFeedbackQueryBuilder) OrderByTel(asc bool) *userFeedbackQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "tel "+order)
	return qb
}

func (qb *userFeedbackQueryBuilder) WhereType(p mysql.Predicate, value int32) *userFeedbackQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "type", p),
		value,
	})
	return qb
}

func (qb *userFeedbackQueryBuilder) WhereTypeIn(value []int32) *userFeedbackQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "type", "IN"),
		value,
	})
	return qb
}

func (qb *userFeedbackQueryBuilder) WhereTypeNotIn(value []int32) *userFeedbackQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "type", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userFeedbackQueryBuilder) OrderByType(asc bool) *userFeedbackQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "type "+order)
	return qb
}

func (qb *userFeedbackQueryBuilder) WhereState(p mysql.Predicate, value int32) *userFeedbackQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "state", p),
		value,
	})
	return qb
}

func (qb *userFeedbackQueryBuilder) WhereStateIn(value []int32) *userFeedbackQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "state", "IN"),
		value,
	})
	return qb
}

func (qb *userFeedbackQueryBuilder) WhereStateNotIn(value []int32) *userFeedbackQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "state", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userFeedbackQueryBuilder) OrderByState(asc bool) *userFeedbackQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "state "+order)
	return qb
}

func (qb *userFeedbackQueryBuilder) WhereReply(p mysql.Predicate, value string) *userFeedbackQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "reply", p),
		value,
	})
	return qb
}

func (qb *userFeedbackQueryBuilder) WhereReplyIn(value []string) *userFeedbackQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "reply", "IN"),
		value,
	})
	return qb
}

func (qb *userFeedbackQueryBuilder) WhereReplyNotIn(value []string) *userFeedbackQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "reply", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userFeedbackQueryBuilder) OrderByReply(asc bool) *userFeedbackQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "reply "+order)
	return qb
}

func (qb *userFeedbackQueryBuilder) WhereCreatedAt(p mysql.Predicate, value time.Time) *userFeedbackQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *userFeedbackQueryBuilder) WhereCreatedAtIn(value []time.Time) *userFeedbackQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *userFeedbackQueryBuilder) WhereCreatedAtNotIn(value []time.Time) *userFeedbackQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userFeedbackQueryBuilder) OrderByCreatedAt(asc bool) *userFeedbackQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_at "+order)
	return qb
}

func (qb *userFeedbackQueryBuilder) WhereUpdatedAt(p mysql.Predicate, value time.Time) *userFeedbackQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *userFeedbackQueryBuilder) WhereUpdatedAtIn(value []time.Time) *userFeedbackQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *userFeedbackQueryBuilder) WhereUpdatedAtNotIn(value []time.Time) *userFeedbackQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userFeedbackQueryBuilder) OrderByUpdatedAt(asc bool) *userFeedbackQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_at "+order)
	return qb
}
