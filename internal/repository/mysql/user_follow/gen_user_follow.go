///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package user_follow

import (
	"fmt"
	"time"

	"campus-recruiting-api/internal/repository/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *UserFollow {
	return new(UserFollow)
}

func NewQueryBuilder() *userFollowQueryBuilder {
	return new(userFollowQueryBuilder)
}

func (t *UserFollow) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type userFollowQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *userFollowQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *userFollowQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&UserFollow{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *userFollowQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&UserFollow{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *userFollowQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&UserFollow{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *userFollowQueryBuilder) First(db *gorm.DB) (*UserFollow, error) {
	ret := &UserFollow{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && errors.Is(res.Error, gorm.ErrRecordNotFound) {
		return nil, nil
	}
	return ret, res.Error
}

func (qb *userFollowQueryBuilder) QueryOne(db *gorm.DB) (*UserFollow, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *userFollowQueryBuilder) QueryAll(db *gorm.DB) ([]*UserFollow, error) {
	var ret []*UserFollow
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *userFollowQueryBuilder) Limit(limit int) *userFollowQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *userFollowQueryBuilder) Offset(offset int) *userFollowQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *userFollowQueryBuilder) WhereId(p mysql.Predicate, value int32) *userFollowQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *userFollowQueryBuilder) WhereIdIn(value []int32) *userFollowQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *userFollowQueryBuilder) WhereIdNotIn(value []int32) *userFollowQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userFollowQueryBuilder) OrderById(asc bool) *userFollowQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *userFollowQueryBuilder) WhereCreatedAt(p mysql.Predicate, value time.Time) *userFollowQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *userFollowQueryBuilder) WhereCreatedAtIn(value []time.Time) *userFollowQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *userFollowQueryBuilder) WhereCreatedAtNotIn(value []time.Time) *userFollowQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userFollowQueryBuilder) OrderByCreatedAt(asc bool) *userFollowQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_at "+order)
	return qb
}

func (qb *userFollowQueryBuilder) WhereUpdatedAt(p mysql.Predicate, value time.Time) *userFollowQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *userFollowQueryBuilder) WhereUpdatedAtIn(value []time.Time) *userFollowQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *userFollowQueryBuilder) WhereUpdatedAtNotIn(value []time.Time) *userFollowQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userFollowQueryBuilder) OrderByUpdatedAt(asc bool) *userFollowQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_at "+order)
	return qb
}

func (qb *userFollowQueryBuilder) WhereType(p mysql.Predicate, value int32) *userFollowQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "type", p),
		value,
	})
	return qb
}

func (qb *userFollowQueryBuilder) WhereTypeIn(value []int32) *userFollowQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "type", "IN"),
		value,
	})
	return qb
}

func (qb *userFollowQueryBuilder) WhereTypeNotIn(value []int32) *userFollowQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "type", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userFollowQueryBuilder) OrderByType(asc bool) *userFollowQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "type "+order)
	return qb
}

func (qb *userFollowQueryBuilder) WhereTopicId(p mysql.Predicate, value int32) *userFollowQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "topic_id", p),
		value,
	})
	return qb
}

func (qb *userFollowQueryBuilder) WhereTopicIdIn(value []int32) *userFollowQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "topic_id", "IN"),
		value,
	})
	return qb
}

func (qb *userFollowQueryBuilder) WhereTopicIdNotIn(value []int32) *userFollowQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "topic_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userFollowQueryBuilder) OrderByTopicId(asc bool) *userFollowQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "topic_id "+order)
	return qb
}

func (qb *userFollowQueryBuilder) WhereFromUserId(p mysql.Predicate, value int32) *userFollowQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "from_user_id", p),
		value,
	})
	return qb
}

func (qb *userFollowQueryBuilder) WhereFromUserIdIn(value []int32) *userFollowQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "from_user_id", "IN"),
		value,
	})
	return qb
}

func (qb *userFollowQueryBuilder) WhereFromUserIdNotIn(value []int32) *userFollowQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "from_user_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *userFollowQueryBuilder) OrderByFromUserId(asc bool) *userFollowQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "from_user_id "+order)
	return qb
}
